/*
 * MyCpabe.cpp
 *
 *  Created on: 2013-3-8
 *      Author: hust
 */

#include "MyCpabe.h"
#include <time.h>

MyCpabe::MyCpabe()
{

}

/**
 * setup first, and you will get 'pub_key' and 'master_key' file under you default folder
 */
bool MyCpabe::setUp()
{
    // if succeed , return 0
    int i = system("/usr/local/bin/cpabe-setup");

    return (i ? false : true);
}

/**
 * Description: KeyGeneration for a user
 * Input:
 * 	pubKeyFilename: The public key file path
 * 	masterKeyFilename: The master key file path, and it should be 'master_key'
 *  userAttributeSet:	the user attributes, and they should be Serialization first
 *  outFileL: the secret key file path you intent to generate
 */
bool MyCpabe::KeyGen(const string & pubKeyFilename,
                     const string & masterKeyFilename, const string & userAttributeSet,
                     const string & outFile)
{
    if ((access(masterKeyFilename.c_str(), 0)) == -1)
    {
        cout << "The master_key does not exist!" << endl;
        return false;
    }

    if ((access(pubKeyFilename.c_str(), 0)) == -1)
    {
        cout << "The pub_key does not exist!" << endl;
        return false;
    }

    string cmd = "/usr/local/bin/cpabe-keygen -o " + outFile + " "
                 + pubKeyFilename + " " + masterKeyFilename + " " + userAttributeSet;
    int i = system(cmd.c_str());

    return (i ? false : true);
}

/*
 * Description: the data owner call this function to encrypt the data , and only the users
 * 				who are able to satisfy the policy can decrypt the cipher
 * Input:
 * 	pubKeyFilename: the public key file path , and it should be 'pub_key'
 *  plainText: the data you want to encrypt, here it should be a file path
 *  policy: control access policy, attribute sets
 */
bool MyCpabe::Encrypt(const string & pubKeyFilename, const string & plainText,
                      const string & policy)
{
    if ((access(pubKeyFilename.c_str(), 0)) == -1)
    {
        cout << "The pub_key does not exist!" << endl;
        return false;
    }

    if ((access(plainText.c_str(), 0)) == -1)
    {
        cout << "The plainText to be encrypted does not exist!" << endl;
        return false;
    }

    string cmd = "/usr/local/bin/cpabe-enc " + pubKeyFilename + " " + plainText
                 + " \'" + policy + "\'";
    int i = system(cmd.c_str());
    return (i ? false : true);
}

/*
 * Description: The legal user can decrypt the cipher with his private key
 * Input:
 * 	pubKeyFilename: The public key file path, and it should be 'pub_key'
 *  secretKey:	The user's secrete key, this is generated by the function KeyGen()
 *  CipherText:	the cipher text you want to decrypt
 */
bool MyCpabe::Decrypt(const string & pubKeyFilename, const string & secretKey,
                      const string & cipherText)
{
    if ((access(cipherText.c_str(), 0)) == -1)
    {
        cout << "The cipher Text does not exist!" << endl;
        return false;
    }

    if ((access(secretKey.c_str(), 0)) == -1)
    {
        cout << "The secret key does not exist!" << endl;
        return false;
    }

    if ((access(pubKeyFilename.c_str(), 0)) == -1)
    {
        cout << "The pub_key does not exist!" << endl;
        return false;
    }

    string cmd = "/usr/local/bin/cpabe-dec " + pubKeyFilename + " " + secretKey
                 + " " + cipherText;
    int i = system(cmd.c_str());

    return (i ? false : true);
}
/*

int main()
{
	MyCpabe cpabe;

	clock_t start, finish;
	double duration;

	start = clock();

	if (cpabe.setUp())
	{
		cout << "cpabe set up succeed!" << endl;
	}
	else
	{
		cout << "cpabe set up failed!" << endl;
		return -1;
	}

	finish = clock();
	duration = ((double) finish - start) / CLOCKS_PER_SEC;
	cout << "-----> The cpabe set up cost is : " << duration << endl << endl;

	if ((access("pub_key", 0)) != -1)
	{
		cout << "The pub_key file does exist! " << endl;
	}
	else
	{
		cout << "The pub_key file does not exist!" << endl;
		return -1;
	}

	if ((access("master_key", 0)) != -1)
	{
		cout << "The master_key file does exist!" << endl;
	}
	else
	{
		cout << "The master_key file does not exist!" << endl;
		return -1;
	}

	string pubKeyFilename = "pub_key", masterKeyFilename = "master_key";

	string plainText = "cpabeTest";

	string secreteKey = "sara_priv_key";
	string userAttribute = "sysadmin it_department \'office = 1413\' ";

	start = clock();
	// test the key generate function
	if (cpabe.KeyGen(pubKeyFilename, masterKeyFilename, userAttribute,
			secreteKey))
	{
		cout << "cpabe secrete key generate succeed!" << endl;
	}
	else
	{
		cout << "cpabe key generate failed!" << endl;
		return -1;
	}

	finish = clock();
	duration = ((double) finish - start) / CLOCKS_PER_SEC;
	cout << "----> The cpabe key generate cost is : " << duration << endl
			<< endl;

	if ((access(secreteKey.c_str(), 0)) != -1)
	{
		cout << "The secretKey does exist!" << endl;
	}
	else
	{
		cout << "The secretKey does not exist!" << endl;
		return -1;
	}

	string policy =
			"(sysadmin and (office = 1413 or security_team)) or (business_staff and 2 of (executive_level >= 5, audit_group, strategy_team))";

	start = clock();
	// test the Encrypt() function to encrypt the file
	if (cpabe.Encrypt(pubKeyFilename, plainText, policy))
	{
		cout << "capbe encrypt file succeed!" << endl;
	}
	else
	{
		cout << "cpabe encrypt file failed!" << endl;
		return -1;
	}

	finish = clock();
	duration = ((double) finish - start) / CLOCKS_PER_SEC;
	cout << "---> The cpabe encrypt file cost is : " << duration << endl
			<< endl;

	if ((access((plainText + ".cpabe").c_str(), 0)) != -1)
	{
		cout << "encrypted file does exist" << endl;
	}
	else
	{
		cout << "encrypted file does not exist!" << endl;
		return -1;
	}

	cout << endl << "Press any key to decrypt the cipher text!" << endl;
	cin.ignore().get();
	cout << endl;

	start = clock();
	// test the Decrypt() function to decrypt the cipher
	if (cpabe.Decrypt(pubKeyFilename, secreteKey, plainText + ".cpabe"))
	{
		cout << "cpabe decrypt file succeed!" << endl;
	}
	else
	{
		cout << "cpabe decrypt file failed!" << endl;
		return -1;
	}

	finish = clock();
	duration = ((double) finish - start) / CLOCKS_PER_SEC;
	cout << "---> The cpabe decrypt file cost is : " << duration << endl
			<< endl;

	if ((access(plainText.c_str(), 0)) != -1)
	{
		cout << "decrypt file does exist!" << endl;
	}
	else
	{
		cout << "decrypt file does not exist!" << endl;
		return -1;
	}

	cout << "over ....." << endl;
	return 0;
}
*/
